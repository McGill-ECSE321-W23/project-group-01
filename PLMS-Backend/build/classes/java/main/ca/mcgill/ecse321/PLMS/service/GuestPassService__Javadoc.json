{"doc":" Service class for all the business methods related to the guest pass model class in the PLMS system\n","fields":[],"enumConstants":[],"methods":[{"name":"getAllGuestPasses","paramTypes":[],"doc":" Service method to fetch all guest passes in the database\n @return the arraylist of guest passes\n"},{"name":"getGuestPassById","paramTypes":["int"],"doc":" Service method to fetch a guest pass with a specific guest pass id in the database\n @param guestPassId id of the pass that is requested from persistence layer\n @return the requested guest pass\n"},{"name":"createGuestPass","paramTypes":["ca.mcgill.ecse321.PLMS.model.GuestPass","int","int","java.time.LocalDateTime"],"doc":" Service method to store the created guest pass object into the database\n @param guestPass instance of the pass to be persisted\n @param floorNumber level of the floor on which the pass applies\n @param nrIncrements increments of 15 minutes indicating the duration of the pass\n @param currentTime time of purchase of the pass\n @return the newly created guest pass (if successful)\n"},{"name":"hasExceededCapacity","paramTypes":["java.time.LocalDateTime","java.time.LocalDateTime","int","boolean"],"doc":" Helper method to check if we have exceeded capacity on a floor based\n on the number of guest passes and monthly passes on that floor\n @param floorNumber - number of the floor\n @param isLarge - size of the spot\n @return - true if we've reached capacity for those spots, false otherwise\n"},{"name":"isOverlappingGuestPass","paramTypes":["java.time.LocalDateTime","java.time.LocalDateTime","java.time.LocalDate","java.time.LocalTime","java.time.LocalTime"],"doc":" Function for checking if a pass is active right at this point in time, given the start and end times\n and date.\n @param date - date of the pass\n @param startTime - start time of the pass\n @param endTime - end time of the pass\n @return true if the pass is currently active\n"},{"name":"deleteGuestPassById","paramTypes":["int"],"doc":" Service method that deletes the guest pass with guest pass id guestPassId from the database\n @param guestPassId id of the pass to be deleted\n"},{"name":"getGuestPassesByFloor","paramTypes":["int"],"doc":" Service method that acquires a list of passes by floor\n @param floorNumber level of the floor we want to get the passes from\n @return an arraylist of the guest passes corresponding to the appropriate floor\n"},{"name":"getGuestPassesByDate","paramTypes":["java.time.LocalDate"],"doc":" Service that fetches the guest passes that were created in a certain day\n @param date day on which the passes were created\n @return a list containing guest passes created in the same day\n"},{"name":"validateGuestPassHours","paramTypes":["java.sql.Time","java.sql.Time","java.sql.Time","java.sql.Time"],"doc":" Service method that validates the guest pass hours\n @param startTime time from which the pass is valid\n @param endTime end time for the validity of the pass\n @param openingTime opening time of the parking lot\n @param closingTime closing time of the parking lot\n"},{"name":"isSpotOccupied","paramTypes":["int","java.lang.String","java.sql.Time","java.sql.Time","java.time.LocalDate"],"doc":" Service method that indicates if a certain spot is occupied (so it can't be reserved by someone else in the same time)\n @param floorNumber level floor on which the spot is\n @param spotNumber number of the spot on the specified floor\n @param startTime time from which we want to see if the spot is occupated\n @param endTime end of the time interval for the spot's occupancy\n @param date day on which we want to check the occupancy of a spot\n @return whether or not the spot is occupied (true or false)\n"}],"constructors":[]}