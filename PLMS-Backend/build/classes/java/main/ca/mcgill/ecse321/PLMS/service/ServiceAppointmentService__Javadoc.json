{"doc":" Service class for all the business methods related to the service appointment model class in the PLMS system\n","fields":[],"enumConstants":[],"methods":[{"name":"createServiceAppointment","paramTypes":["ca.mcgill.ecse321.PLMS.model.ServiceAppointment"],"doc":" Creates a service appointment. Checks for scheduling issues and assigns employee\n if there is one before saving in database\n @param serviceAppointment - appt to schedule\n @return - scheduled appt\n"},{"name":"findEndTime","paramTypes":["java.time.LocalTime","ca.mcgill.ecse321.PLMS.model.ServiceAppointment"],"doc":" Find the end time of the appointment based on the length of the appointment\n @param startTime - start time of the appointment \n @param serviceAppointment - appointment\n @return - the end time of the appointment\n"},{"name":"getAllServiceAppointments","paramTypes":[],"doc":" Get all the service appointments in the entire database\n @return an arraylist of service appointments if successful\n"},{"name":"findServiceAppointmentById","paramTypes":["int"],"doc":" Get a service appointment based on the id.\n @param id - id of the appointment\n @return appt if it exists\n"},{"name":"getAllServiceAppointmentsByDate","paramTypes":["java.time.LocalDate"],"doc":" Find all the service appointments that are scheduled for a particular date.\n @param date - date for which we want to find appointments\n @return all appointments on that date, if there are any\n"},{"name":"getAllServiceAppointmentsByEmployee","paramTypes":["java.lang.String"],"doc":" Find the all the service appointments for an employee\n @param employeeEmail - employee for which we want to find appointments\n @return all appointments for this employee, if there are any\n"},{"name":"getAllServiceAppointmentsByMonthlyCustomer","paramTypes":["java.lang.String"],"doc":" Find all the service appointments for a monthly customer, if there are any\n @param monthlyCustomerEmail - email of customer we want to find appointments for\n @return all appointments with the customer\n"},{"name":"deleteServiceAppointmentById","paramTypes":["int"],"doc":" Delete a service appointment by an id.\n @param id id of the service appointment to be deleted\n"},{"name":"updateServiceAppointment","paramTypes":["ca.mcgill.ecse321.PLMS.model.ServiceAppointment","int"],"doc":" Update a service appointment's attributes, based on the id of the appt.\n @param serviceAppointment - appointment to update\n @param id - id of the appt\n @return updated appt\n"},{"name":"updateEmployeeEmailServiceAppointment","paramTypes":["ca.mcgill.ecse321.PLMS.model.Employee","int"],"doc":" Service method to update the employee responsable for a service appointment\n @param employee new employee responsable fro the service appointment\n @param id service appointment's id\n @return instance of the updated service appointment\n"},{"name":"checkForConflictInEmployeeScheedule","paramTypes":["ca.mcgill.ecse321.PLMS.model.ServiceAppointment"],"doc":" Service method to check for conflicts in employee schedule\n @param appointment appointment that is compared with the rest for overlapping checking\n @return\n"},{"name":"findEmployeeToAssignToAppointment","paramTypes":["ca.mcgill.ecse321.PLMS.model.ServiceAppointment"],"doc":" Method to find assigned employee to service appointment.\n Employees are assigned based on prior scheduling conflicts. We also allow for \n appointments to have a null employee, as the user should be allowed to have access\n to scheduling appointments, regardless of whether employees are there. Marwan stated that scheduling is\n not a priority (we simply booked appointments and just assign an employee)\n @return - null if no employees to schedule, or an employee with no scheduling conflicts\n"},{"name":"isConflicting","paramTypes":["ca.mcgill.ecse321.PLMS.model.ServiceAppointment","ca.mcgill.ecse321.PLMS.model.ServiceAppointment"],"doc":" Function to check if two appointments have time overlap. Used for scheduling employees.\n @param appt1 first appointment\n @param appt2 second appointment\n @return whether or not there is a conflict between appointments\n"},{"name":"parkingLotAddedToDatabase","paramTypes":[],"doc":" Helper method to find the single parking lot object\n stored in the database. Throws exception if it isn't there.\n @return - parking lot object, if it exists\n"},{"name":"validateAppointmentHours","paramTypes":["java.sql.Time","java.sql.Time","java.sql.Time","java.sql.Time"],"doc":" Helper function to throw PLMS exceptions related to scheduling errors.\n Appointments must fall within the hours of operation of the lot.\n @param apptStartTime\n @param apptEndTime\n @param openingTime\n @param closingTime\n"}],"constructors":[]}