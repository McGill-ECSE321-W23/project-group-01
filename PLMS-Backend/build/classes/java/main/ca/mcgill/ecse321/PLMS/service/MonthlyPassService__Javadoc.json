{"doc":" Service class for all the business methods related to the monthly customer model class in the PLMS system\n","fields":[],"enumConstants":[],"methods":[{"name":"getAllMonthlyPasses","paramTypes":[],"doc":" Service method to fetch all monthly passes in the database\n @return an arraylist of monthly passes present in the database\n"},{"name":"getMonthlyPassById","paramTypes":["int"],"doc":" Service method to fetch a monthly pass with a specific id in the database\n @param monthlyPassId id of the monthly pass to be fetched\n @return monthly pass corresponding to the id passed in parameters\n"},{"name":"createMonthlyPass","paramTypes":["ca.mcgill.ecse321.PLMS.model.MonthlyPass","int","int","java.lang.String"],"doc":" Service method to store the created monthly pass object into the database\n @param monthlyPass instance to be persisted\n @param floorNumber floor on which the monthly pass is activated\n @param nrMonths duration of the monthly pass\n @param email monthly customer's email that is purchasing the monthly pass\n @return\n"},{"name":"hasExceededCapacity","paramTypes":["java.time.LocalDate","java.time.LocalDate","int","boolean"],"doc":" Helper method to check if we have exceeded capacity on a floor based\n on the number of guest passes and monthly passes on that floor\n @param floorNumber - number of the floor\n @param isLarge - size of the spot\n @return - true if we've reached capacity for those spots, false otherwise\n"},{"name":"isOverlappingMonthlyPass","paramTypes":["java.time.LocalDate","java.time.LocalDate","java.time.LocalDate","java.time.LocalDate"],"doc":" Checks to see overlap between two monthly passes\n @param newPassStartDate first pass beginning\n @param newPassEndDate first pass ending\n @param otherPassStartDate second pass beginning\n @param otherPassEndDate second pass ending\n @return whether or not the passes overlap\n"},{"name":"getMonthlyPassesByFloor","paramTypes":["int"],"doc":" Service method that returns monthly passes on a specified floor\n @param floorNumber level of the floor from which to fetch the monthly passes\n @return an arraylist of the monthly passes requested\n"},{"name":"getMonthlyPassesByMonthlyCustomer","paramTypes":["java.lang.String"],"doc":" Service method that fetches the monthly passes of a monthly customer\n @param email monthly customer's email related to the account\n @return arraylist containing the requested monthly passes\n"},{"name":"getMonthlyPassesByDate","paramTypes":["java.time.LocalDate"],"doc":" Return all of the monthly passes that are active on a given date.\n @param date - date we want to search for\n @return - all passes active on that date\n"},{"name":"isSpotOccupied","paramTypes":["int","java.lang.String","java.time.LocalDate","java.time.LocalDate"],"doc":" Service method that determines if a certain spot is occupied for a period of time\n @param floorNumber level floor that is considered in the parking lot\n @param spotNumber number of the spot considered\n @param startDate start of the interval of time considered\n @param endDate end of the interval of time considered\n @return whether or not the spot is occupied for the specified interval of time\n"}],"constructors":[]}